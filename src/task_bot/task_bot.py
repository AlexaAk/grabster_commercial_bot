#!/usr/bin/python3
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from enum import Enum
import json
import os
import platform
if platform.system() == "Linux":
    os.chdir("/home/alexaak/python/Buh_bots/")
else:
    os.chdir("../../")
import keyboards as kb
import buh
import datetime


# process stages ------------------------------------------------------------------------------------------------------
class Stage(Enum):
    NONE = 0
    EMPLOYEE_NAME = 1
    TASK_NUM = 2
    PRICE = 3
    TASK_NAME = 4
    ALREADY_EXISTS = 5
    IF_EXISTS = 6
    PROJECT_NAME = 7
    # IS_PAID = 6
    TASK_LINK = 8
    PROJECT_LINK = 9
    NEW_EMPLOYEE_NAME = 10
    NEW_EMPLOYEE_BANK = 11
    GET_NEW_EMPL_INFO = 12
    GETTING_MESSAGE = 13
    EMPLOYEE_EDIT = 14
    EDIT_NAME = 15
    EDIT_BANK = 16
    EDIT_TG = 17


# bot creation --------------------------------------------------------------------------------------------------------
json_config = open("config.json", "r", encoding="utf-8")
json_file = json.load(json_config)

bot = Bot(token=json_file["token_task_bot"])
json_config.close()

dp = Dispatcher(bot)

# user stuff ----------------------------------------------------------------------------------------------------------
users = {}


class User:
    def __init__(self):
        # self.user_id = id
        self.task = buh.Task()
        self.stage = Stage.NONE
        self.tasks_in_total = 0
        self.qur_task = 0
        self.new_us_name = ''
        self.get_info_message = ''
        self.edit_us_num = 0

    def clear_user (self):
        self.task = self.task = buh.Task()
        self.stage = Stage.NONE
        self.tasks_in_total = 0
        self.qur_task = 0
        self.new_us_name = ''
        self.get_info_message = ''


def create_user_session(user_id):
    users[user_id] = User()
    users[user_id].Task = buh.Task()
    users[user_id].stage = Stage.NONE


# main menu -----------------------------------------------------------------------------------------------------------
async def main_menu (message):
    user_id = message.chat.id
    create_user_session(user_id)
    await bot.send_message(user_id,
                           "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è? üåø", reply_markup=kb.inline_kb_main)
    users[user_id].stage = Stage.NONE


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    user_id = message.chat.id
    create_user_session(user_id)
    await main_menu(message)


# the great message handler -------------------------------------------------------------------------------------------
@dp.message_handler()
async def stuff_by_letter(message: types.Message):
    # creating user session if no /start command was used
    user_id = message.chat.id
    if len(users) == 0:
        create_user_session(user_id)

    # getting message text
    m_t = message.text

    # doing stuff depending on stage
    if users[user_id].stage == Stage.NONE:  # -------------------------------------------------------- NONE -----------
        await main_menu(message)

    # --------------------------------------------------------------- EMPLOYEE_NAME -- and -- EMPLOYEE_EDIT -----------
    elif users[user_id].stage == Stage.EMPLOYEE_NAME or users[user_id].stage == Stage.EMPLOYEE_EDIT:
        if len(message.text) != 1:
            if users[user_id].stage == Stage.EMPLOYEE_NAME:
                await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ '
                                            '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É')
            else:
                await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
            return
        char = m_t
        list_c = []
        list_1 = []
        list_2 = []
        list_c.append(list_1)
        list_c.append(list_2)
        json_config_1 = open("config.json", "r", encoding="utf-8")
        json_file_1 = json.load(json_config_1)
        employee = json_file_1["list_employee_names"]
        json_config_1.close()
        for i in range(len(employee)):
            if len(employee[i]) != 0:
                if employee[i][0] == char.upper():
                    list_c[0].append(employee[i])
                    list_c[1].append(i)
        if len(list_c[0]) == 0:
            await bot.send_message(user_id, '–¢–∞–∫–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç')
        else:
            kb.clean_stuff_kb()
            kb.fill_stuff_kb(list_c)
            await bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ', reply_markup=kb.stuff_kb_list[0])

    elif users[user_id].stage == Stage.TASK_NUM:  # ---------------------------------------------- TASK_NUM -----------
        if m_t.isdigit():
            users[user_id].Task.set_task_num(int(m_t))
            users[user_id].tasks_in_total = m_t
            users[user_id].qur_task = 1
            users[user_id].stage = Stage.PRICE
            await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏ ' + str(users[user_id].qur_task))
        else:
            await bot.send_message(user_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ '
                                            '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')

    elif users[user_id].stage == Stage.PRICE:  # ---------------------------------------------------- PRICE -----------
        if m_t.isdigit():
            users[user_id].Task.set_price(int(m_t))
            users[user_id].stage = Stage.TASK_NAME
            await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ' + str(users[user_id].qur_task))
        else:
            await bot.send_message(user_id,
                                   '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏' + str(
                                       users[user_id].qur_task))

    elif users[user_id].stage == Stage.TASK_NAME:  # -------------------------------------------- TASK_NAME -----------
        users[user_id].Task.set_task_name(m_t)
        users[user_id].stage = Stage.ALREADY_EXISTS
        await bot.send_message(user_id, '–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ:', reply_markup=kb.inline_kb_exists)

    elif users[user_id].stage == Stage.ALREADY_EXISTS:  # ---------------------------------- ALREADY_EXISTS -----------
        await bot.send_message(user_id, '–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ:', reply_markup=kb.inline_kb_exists)

    elif users[user_id].stage == Stage.IF_EXISTS:  # -------------------------------------------- IF_EXISTS -----------
        if m_t.isdigit():
            users[user_id].Task.set_if_exists_price(int(m_t))
            users[user_id].stage = Stage.PROJECT_NAME
            await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ' + str(users[user_id].qur_task))
        else:
            await bot.send_message(user_id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—É–º–º—É –±—É–¥—É—â–µ–π –æ–ø–ª–∞—Ç—ã: ')

    elif users[user_id].stage == Stage.PROJECT_NAME:  # -------------------------------------- PROJECT_NAME -----------
        users[user_id].Task.set_project_name(m_t)
        users[user_id].stage = Stage.TASK_LINK
        await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, '
                                        '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=kb.inline_kb_links2)

    elif users[user_id].stage == Stage.TASK_LINK:  # -------------------------------------------- TASK_LINK -----------
        users[user_id].Task.set_task_link(m_t)
        users[user_id].stage = Stage.PROJECT_LINK
        await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, '
                                        '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=kb.inline_kb_links1)

    elif users[user_id].stage == Stage.PROJECT_LINK:  # -------------------------------------- PROJECT_LINK -----------
        users[user_id].Task.set_project_link(m_t)
        if int(users[user_id].qur_task) == int(users[user_id].tasks_in_total):
            await bot.send_message(user_id, '–í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –≤—ã—Å—ã–ª–∞—é –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
            await bot.send_message(user_id, users[user_id].Task.compose_a_message(), reply_markup=kb.inline_kb_send_msg)
            users[user_id].stage = Stage.NONE
        else:
            users[user_id].stage = Stage.PRICE
            users[user_id].qur_task += 1
            await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏ ' + str(users[user_id].qur_task))

    elif users[user_id].stage == Stage.NEW_EMPLOYEE_NAME:  # ---------------------------- NEW_EMPLOYEE_NAME -----------
        m_t = m_t[0].upper() + m_t[1:]
        users[user_id].new_us_name = m_t
        users[user_id].stage = Stage.NEW_EMPLOYEE_BANK
        await bot.send_message(user_id,
                               '–£–∫–∞–∂–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç '
                               '–≤ —Å–ø–∏—Å–∫–∞ - –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –î—Ä—É–≥–æ–π.', reply_markup=kb.inline_kb_banks)

    elif users[user_id].stage == Stage.NEW_EMPLOYEE_BANK:  # ---------------------------- NEW_EMPLOYEE_BANK -----------
        await bot.send_message(user_id,
                               '–£–∫–∞–∂–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ï—Å–ª–∏ —É –Ω–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫, –∏–ª–∏ –±–∞–Ω–∫ –Ω–µ –∏–∑'
                               ' —Å–ø–∏—Å–∫–∞ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –î—Ä—É–≥–æ–π', reply_markup=kb.inline_kb_banks)

    elif users[user_id].stage == Stage.GET_NEW_EMPL_INFO:  # ---------------------------- GET_NEW_EMPL_INFO -----------
        m_t = '@alexa_ak, \n' + m_t
        users[user_id].get_info_message = m_t
        await bot.send_message(user_id,
                               '–í–æ—Ç —Ç–∞–∫–æ–π –≤–æ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–∏–ª—Å—è: \n' + m_t, reply_markup=kb.inline_kb_send_msg)

    elif users[user_id].stage == Stage.GETTING_MESSAGE:  # -------------------------------- GETTING_MESSAGE -----------
        if m_t[0] == '{':
            json_string = json.loads(message.text)
            # print(message.date)  # –í—ã–≤–æ–¥ –¥–∞—Ç—ã —Ç–∏–ø–æ 20:58:30 05.07.2020
            time = message.date.time()
            s = ''
            if time < datetime.time(12):
                s += '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ,\n'
            elif time < datetime.time(17):
                s += '–î–æ–±—Ä—ã–π –¥–µ–Ω—å,\n'
            elif time < datetime.time(23):
                s += '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä,\n'
            else:
                s += '–î–æ–±—Ä–æ–π –Ω–æ—á–∏,\n'
            s += '–ü–µ—Ä–µ–≤–µ–ª–∞ '
            s += str(json_string["total_price"])
            s += ' –Ω–∞ '
            if json_string["employee_bank"] != "":
                s += json_string["employee_bank"]
            else:
                s += '–∫–∞—Ä—Ç—É'
            s += ' ('
            x = json_string["task_num"]
            if x == 1:
                s += json_string["task_name"][0]
                s += ', –ø—Ä–æ–µ–∫—Ç - ' + json_string["project_name"][0]
            else:
                for i in range(x):
                    temp = json_string["price"][i]
                    if x != 1:
                        s = s + str(temp) + ' '
                    s = s + str(json_string["task_name"][i])
                    s1 = json_string["project_name"][i]
                    if s1 != '-':
                        s = s + ', –ø—Ä–æ–µ–∫—Ç - ' + s1
                    if i != x - 1:
                        s = s + ' + '
            s += ')\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞'
            await bot.send_message(user_id, '–û—Ç–ª–∏—á–Ω–æ, –≤—ã—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ.. ')
            await bot.send_message(user_id, s)
            json_config_1 = open("config.json", "r", encoding="utf-8")
            json_file_1 = json.load(json_config_1)
            s1 = json_file_1["list_employee_tg"][json_file_1["list_employee_names"].index(json_string["employee_name"])]
            json_config_1.close()
            if s1 != '':
                s1 = '–í–æ—Ç –Ω–∏–∫ –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ' + s1
            else:
                s1 = '–ù–∏–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ :('
            await bot.send_message(user_id, s1, reply_markup=kb.inline_kb_after_json)
            users[user_id].stage = Stage.NONE
        else:
            await bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ..")

    elif users[user_id].stage == Stage.EDIT_NAME:  # -------------------------------------------- EDIT_NAME -----------
        m_t = m_t[0].upper() + m_t[1:]
        json_config_1 = open("config.json", "r", encoding="utf-8")
        json_file_1 = json.load(json_config_1)
        json_file_1["list_employee_names"][users[user_id].edit_us_num] = m_t
        json_config_1.close()
        json_config_1 = open("config.json", "w", encoding="utf-8")
        json.dump(json_file_1, json_config_1, ensure_ascii=False, indent=3)
        json_config_1.close()
        await bot.send_message(user_id,
                               '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ? üåø', reply_markup=kb.inline_kb_main)
        users[user_id].stage = Stage.NONE
    elif users[user_id].stage == Stage.EDIT_TG:  # ------------------------------------------------ EDIT_TG -----------
        if m_t[0] == '@':
            json_config_1 = open("config.json", "r", encoding="utf-8")
            json_file_1 = json.load(json_config_1)
            json_file_1["list_employee_tg"][users[user_id].edit_us_num] = m_t
            json_config_1.close()
            json_config_1 = open("config.json", "w", encoding="utf-8")
            json.dump(json_file_1, json_config_1, ensure_ascii=False, indent=3)
            json_config_1.close()
            await bot.send_message(user_id,
                                   '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ? üåø', reply_markup=kb.inline_kb_main)
            users[user_id].stage = Stage.NONE
        else:
            await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n@name')

    else:  # ----------------------------------------------------------------------------------------- else -----------
        print (users[user_id].stage)
        await bot.send_message(user_id,
                               '–í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –≤—ã–≤–æ–¥–∞ '
                               '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ')


# ----------------------------------------------------- BUTTONS ------------------------------------------------------

# employee names list of buttons -------------------------------------------------------------------------------------
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('b_s'))
async def process_callback_stuff_kb_list(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    code = callback_query.data[3:]
    if code.isdigit():
        code = int(code)
        if users[user_id].stage == Stage.EMPLOYEE_EDIT:
            s = '–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n–∏–º—è:   '
            json_config_1 = open("config.json", "r", encoding="utf-8")
            json_file_1 = json.load(json_config_1)
            s += json_file_1["list_employee_names"][code] + '\n–±–∞–Ω–∫:   '
            s += json_file_1["list_employee_cards"][code] + '\ntelegram:   '
            s += json_file_1["list_employee_tg"][code] + '\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?'
            json_config_1.close()
            users[user_id].edit_us_num = code
            await bot.send_message(callback_query.from_user.id, s, reply_markup=kb.inline_kb_edit)
        else:
            json_config_1 = open("config.json", "r", encoding="utf-8")
            json_file_1 = json.load(json_config_1)
            employee = json_file_1["list_employee_names"]
            bank = json_file_1["list_employee_cards"]
            json_config_1.close()
            users[user_id].Task.set_employee_name(employee[code])
            users[user_id].Task.set_employee_bank(bank[code])
            users[user_id].stage = Stage.TASK_NUM
            await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    else:
        print('ERROR 1')


# edit employee info -------------------------------------------------------------------------------------------------
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('edit'))
async def process_callback_edit_empl_info(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    code = callback_query.data[5:]
    if code == 'bank':
        users[user_id].stage = Stage.EDIT_BANK
        await bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–Ω–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ', reply_markup=kb.inline_kb_banks)
    elif code == 'name':
        users[user_id].stage = Stage.EDIT_NAME
        await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è: ')
    else:
        users[user_id].stage = Stage.EDIT_TG
        await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n@name')


# if payment already exists -------------------------------------------------------------------------------------------
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('exists'))
async def process_callback_stuff_kb_list(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    code = callback_query.data
    if code == 'exists_new_full':
        users[user_id].Task.set_already_exists(buh.AlreadyExists.NEW_FULL)
        users[user_id].Task.set_skip_exists_price()
        users[user_id].stage = Stage.PROJECT_NAME
        await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ' + str(users[user_id].qur_task))
    elif code == 'exists_new_part':
        users[user_id].Task.set_already_exists(buh.AlreadyExists.NEW_PARTIALLY)
        users[user_id].stage = Stage.IF_EXISTS
        await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—É–º–º—É –±—É–¥—É—â–µ–π –æ–ø–ª–∞—Ç—ã: ')
    else:
        users[user_id].Task.set_already_exists(buh.AlreadyExists.OLD_PARTIALLY)
        users[user_id].Task.set_skip_exists_price()
        users[user_id].stage = Stage.PROJECT_NAME
        await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ' + str(users[user_id].qur_task))


# task and project links ----------------------------------------------------------------------------------------------
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('butt'))
async def process_callback_stuff_kb_list(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    code = callback_query.data
    if users[user_id].stage == Stage.TASK_LINK:  # ---------------------------------------------- TASK_LINK -----------
        if code == 'butt2':
            users[user_id].Task.set_task_link('–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é')
        else:
            users[user_id].Task.set_task_link('–Ω–µ—Ç —Å—Å—ã–ª–∫–∏')
        users[user_id].stage = Stage.PROJECT_LINK
        await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, '
                                                            '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=kb.inline_kb_links1)

    else:  # --------------------------------------------------------------------------------- PROJECT_LINK -----------
        users[user_id].Task.set_project_link('–Ω–µ—Ç —Å—Å—ã–ª–∫–∏')
        if int(users[user_id].qur_task) == int(users[user_id].tasks_in_total):
            await bot.send_message(callback_query.from_user.id, '–í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –≤—ã—Å—ã–ª–∞—é –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
            await bot.send_message(callback_query.from_user.id, users[user_id].Task.compose_a_message(),
                                   reply_markup=kb.inline_kb_send_msg)
            users[user_id].stage = Stage.NONE
        else:
            users[user_id].stage = Stage.PRICE
            users[user_id].qur_task += 1
            await bot.send_message(callback_query.from_user.id,
                                   '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏ ' + str(users[user_id].qur_task))


# final send to Black_buh chat ----------------------------------------------------------------------------------------
@dp.callback_query_handler(lambda c: c.data == 'bsend')
async def process_callback_button1(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if users[user_id].stage == Stage.GET_NEW_EMPL_INFO:  # ------------------------------ GET_NEW_EMPL_INFO -----------
        # 243083696 is Alexa's chat
        await bot.send_message(-761980818, users[user_id].get_info_message)
        create_user_session(user_id)

    else:  # ----------------------------------------------------------------------------------------- NONE -----------
        print(users[user_id].Task.get_json())
        await bot.send_message(-761980818, users[user_id].Task.message)
        await bot.send_message(-761980818, users[user_id].Task.get_json())
        create_user_session(user_id)
    await bot.send_message(user_id,
                           '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? üåø',
                           reply_markup=kb.inline_kb_main)


# back to main menu ---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(lambda c: c.data == 'back_to_main')
async def process_callback_back_to_main(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(user_id,
                           '–•–æ—Ä–æ—à–æ, –º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üåø',
                           reply_markup=kb.inline_kb_main)


# main menu -----------------------------------------------------------------------------------------------------------
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('new'))
async def process_callback_main_menu (callback_query: types.CallbackQuery):
    code = callback_query.data
    user_id = callback_query.from_user.id
    if code == 'new_task':
        users[user_id].stage = Stage.EMPLOYEE_NAME
        await bot.send_message(user_id,
                               '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É')
    elif code == 'new_empl':
        users[user_id].stage = Stage.NONE
        await bot.send_message(user_id,
                               '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –§–∞–º–∏–ª–∏—é –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ï—Å–ª–∏ –æ–Ω–∞ —É –≤–∞—Å –µ—Å—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –µ—ë. –ï—Å–ª–∏ –Ω–µ—Ç'
                               ' - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã! '
                               '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω :)',
                               reply_markup =kb.inline_kb_back_to_menu)
        users[user_id].stage = Stage.NEW_EMPLOYEE_NAME
    elif code == 'new_empl_message':
        users[user_id].Task.set_employee_name('–Ω–æ–≤—ã–π')
        users[user_id].stage = Stage.TASK_NUM
        await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    elif code == 'new_message':
        await bot.send_message(user_id,
                               "–•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π –∫–∞ –º–Ω–µ json...")
        users[user_id].stage = Stage.GETTING_MESSAGE
    elif code == 'new_edit':
        users[user_id].stage = Stage.EMPLOYEE_EDIT
        await bot.send_message(user_id,
                               '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ')
    else:
        users[user_id].stage = Stage.GET_NEW_EMPL_INFO
        await bot.send_message(user_id,
                               '–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ú–æ–∂–µ—Ç–µ –Ω–µ –ø–∏—Å–∞—Ç—å @alexa_ak, '
                               '—è —Å–¥–µ–ª–∞—é —ç—Ç–æ —Å–∞–º.')


# new employee banks -------------------------------------------------------------------------------------------------
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('bank'))
async def process_callback_new_empl_banks(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    code = callback_query.data
    bank = ''
    if code == 'bank_cancel':
            users[user_id].stage = Stage.NONE
            await bot.send_message(user_id,
                                   '–•–æ—Ä–æ—à–æ, –º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üåø',
                                   reply_markup=kb.inline_kb_main)
    if users[user_id].stage == Stage.NEW_EMPLOYEE_BANK or users[user_id].stage == Stage.EDIT_BANK:
        if code == "bank_tink":
            bank = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'
        elif code == 'bank_sber':
            bank = '–°–±–µ—Ä'
        elif code == 'bank_umoney':
            bank = '–Æ–º–∞–Ω–∏'
        elif code == 'bank_other':
            bank = '–∫–∞—Ä—Ç—É'
        json_config_1 = open("config.json", "r", encoding="utf-8")
        json_file_1 = json.load(json_config_1)
        if users[user_id].stage == Stage.NEW_EMPLOYEE_BANK:  # -------------------------- NEW_EMPLOYEE_BANK -----------
            json_file_1["list_employee_names"].insert(0, users[user_id].new_us_name)
            json_file_1["list_employee_cards"].insert(0, bank)
            json_config_1.close()
            json_config_1 = open("config.json", "w", encoding="utf-8")
            json.dump(json_file_1, json_config_1, ensure_ascii=False, indent=3)
            json_config_1.close()
            await bot.send_message(user_id,
                                   '–°–ø–∞—Å–∏–±–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω! –ß—Ç–æ –¥–∞–ª—å—à–µ? üåø', reply_markup=kb.inline_kb_main)
            users[user_id].stage = Stage.NONE
        else:  # -------------------------------------------------------------------------------- EDIT_BANK -----------
            json_file_1["list_employee_cards"][users[user_id].edit_us_num] = bank
            json_config_1.close()
            json_config_1 = open("config.json", "w", encoding="utf-8")
            json.dump(json_file_1, json_config_1, ensure_ascii=False, indent=3)
            json_config_1.close()
            await bot.send_message(user_id,
                                   '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ? üåø', reply_markup=kb.inline_kb_main)
            users[user_id].stage = Stage.NONE


if __name__ == '__main__':
    executor.start_polling(dp)

# @dp.message_handler(commands=['start'])
# async def process_start_command(message: types.Message):
#     await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=kb.greet_kb)

# @dp.message_handler(commands=['1'])
# async def process_command_1(message: types.Message):
#     await message.reply("–ü–µ—Ä–≤–∞—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞", reply_markup=kb.inline_kb1)
#
# @dp.message_handler(commands=['2'])
# async def process_command_2(message: types.Message):
#     await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", reply_markup=kb.inline_kb_full)

# @dp.message_handler(commands=['help'])
# async def process_help_command(message: types.Message):
#     await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–ø—Ä–ø–∞–≤–ª—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!")


# @dp.callback_query_handler(lambda c: c.data == 'button1')
# async def process_callback_button1(callback_query: types.CallbackQuery):
#     await bot.answer_callback_query(callback_query.id)
#     await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')
#
# @dp.callback_query_handler(lambda c: c.data == 'button2')
# async def process_callback_button1(callback_query: types.CallbackQuery):
#     await bot.answer_callback_query(callback_query.id)
#     await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞!')
